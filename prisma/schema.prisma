generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  firstName                 String
  lastName                  String
  email                     String    @unique
  phone                     String
  photo                     String
  password                  String?
  role                      UserRole  @default(USER)
  createBySchoolId          String?   @db.ObjectId
  isVerifyEmail             Boolean   @default(false)
  verifyEmailToken          String?
  verifyEmailTokenExpiresAt DateTime?

  lastActiveAt                DateTime
  isResetPassword             Boolean   @default(false)
  provider                    Provider
  isDeleted                   Boolean   @default(false)
  deleteAt                    DateTime?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?

  memberOnSchools      MemberOnSchool[]
  subjects             Subject[]
  memberOnTeams        MemberOnTeam[]
  teacherOnSubjects    TeacherOnSubject[]
  school               School[]
  Assignment           Assignment[]
  commentOnAssignments CommentOnAssignment[]
}

model School {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  plan        Plan    @default(FREE)
  isDeleted   Boolean @default(false)

  stripe_customer_id           String    @unique
  stripe_price_id              String?
  stripe_subscription_id       String?
  stripe_subscription_expireAt DateTime?

  billingManagerId String? @db.ObjectId
  billingManager   User?   @relation(fields: [billingManagerId], references: [id])

  memberOnSchools          MemberOnSchool[]
  classes                  Class[]
  teams                    Team[]
  students                 Student[]
  subjects                 Subject[]
  memberOnTeams            MemberOnTeam[]
  assignments              Assignment[]
  studentOnAssignments     StudentOnAssignment[]
  attendanceRows           AttendanceRow[]
  attendances              Attendance[]
  teacherOnSubjects        TeacherOnSubject[]
  attendanceTables         AttendanceTable[]
  commentOnAssignments     CommentOnAssignment[]
  scoreOnStudents          ScoreOnStudent[]
  scoreOnSubjects          ScoreOnSubject[]
  fileOnStudentAssignments FileOnStudentAssignment[]
  fileOnAssignments        FileOnAssignment[]
  studentOnSubjects        StudentOnSubject[]
}

model MemberOnSchool {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status Status     @default(PENDDING)
  role   MemberRole @default(TEACHER)

  firstName String
  lastName  String
  email     String
  photo     String
  phone     String

  userId   String @db.ObjectId
  schoolId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  memberOnTeams MemberOnTeam[]

  @@unique([userId, schoolId])
}

model Class {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title         String
  level         String
  description   String?
  educationYear DateTime
  order         Int

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  subjects          Subject[]
  students          Student[]
  studentOnSubjects StudentOnSubject[]
}

model Student {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  picture   String
  number    String
  password  String?

  schoolId                 String                    @db.ObjectId
  classId                  String                    @db.ObjectId
  school                   School                    @relation(fields: [schoolId], references: [id])
  class                    Class                     @relation(fields: [classId], references: [id])
  studentOnSubjects        StudentOnSubject[]
  studentOnAssignments     StudentOnAssignment[]
  commentOnAssignments     CommentOnAssignment[]
  scoreOnStudents          ScoreOnStudent[]
  attendances              Attendance[]
  fileOnStudentAssignments FileOnStudentAssignment[]
}

model Team {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?
  icon        String

  schoolId      String         @db.ObjectId
  school        School         @relation(fields: [schoolId], references: [id])
  memberOnTeams MemberOnTeam[]
}

model MemberOnTeam {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status    Status     @default(PENDDING)
  role      MemberRole @default(TEACHER)
  firstName String
  lastName  String
  email     String
  photo     String
  phone     String

  userId           String @db.ObjectId
  memberOnSchoolId String @db.ObjectId
  teamId           String @db.ObjectId
  schoolId         String @db.ObjectId

  user           User           @relation(fields: [userId], references: [id])
  memberOnSchool MemberOnSchool @relation(fields: [memberOnSchoolId], references: [id])
  team           Team           @relation(fields: [teamId], references: [id])
  school         School         @relation(fields: [schoolId], references: [id])
}

model Subject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title         String
  educationYear DateTime
  description   String
  order         Int

  backgroundImage String?

  classId  String @db.ObjectId
  userId   String @db.ObjectId
  schoolId String @db.ObjectId

  class  Class  @relation(fields: [classId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  studentOnSubjects         StudentOnSubject[]
  assignments               Assignment[]
  scoreOnSubjects           ScoreOnSubject[]
  attendanceRows            AttendanceRow[]
  teacherOnSubjects         TeacherOnSubject[]
  attendanceTables          AttendanceTable[]
  attendances               Attendance[]
  scoreOnStudents           ScoreOnStudent[]
  fileOnAssignments         FileOnAssignment[]
  studentOnAssignments      StudentOnAssignment[]
  fileOnStudentAssignments  FileOnStudentAssignment[]
  commentOnAssignments      CommentOnAssignment[]
  skillOnAssignments        SkillOnAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]
}

model TeacherOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status    Status     @default(PENDDING)
  role      MemberRole @default(TEACHER)
  firstName String
  lastName  String
  email     String
  photo     String
  phone     String

  userId    String @db.ObjectId
  subjectId String @db.ObjectId
  schoolId  String @db.ObjectId

  user                User                  @relation(fields: [userId], references: [id])
  subject             Subject               @relation(fields: [subjectId], references: [id])
  school              School                @relation(fields: [schoolId], references: [id])
  CommentOnAssignment CommentOnAssignment[]

  @@unique([userId, subjectId])
}

model StudentOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  picture   String
  number    String

  totalSpeicalScore Float @default(0)

  studentId String @db.ObjectId
  classId   String @db.ObjectId
  subjectId String @db.ObjectId
  schoolId  String @db.ObjectId

  school               School                @relation(fields: [schoolId], references: [id])
  class                Class                 @relation(fields: [classId], references: [id])
  subject              Subject               @relation(fields: [subjectId], references: [id])
  student              Student               @relation(fields: [studentId], references: [id])
  studentOnAssignments StudentOnAssignment[]
  scoreOnStudents      ScoreOnStudent[]
  attendances          Attendance[]

  @@unique([studentId, subjectId])
}

model Assignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  maxScore    Float
  weight      Float  @default(1)

  isAllowDeleteWork Boolean @default(false)

  beginDate DateTime
  dueDate   DateTime?

  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  fileOnAssignments        FileOnAssignment[]
  studentOnAssignments     StudentOnAssignment[]
  skillOnAssignments       SkillOnAssignment[]
  fileOnStudentAssignments FileOnStudentAssignment[]
}

model FileOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  type String
  url  String
  size Float

  subjectId    String     @db.ObjectId
  subject      Subject    @relation(fields: [subjectId], references: [id])
  schoolId     String     @db.ObjectId
  school       School     @relation(fields: [schoolId], references: [id])
  assignmentId String     @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
}

model StudentOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  picture   String
  number    String

  score       Float?
  body        String?
  isCompleted Boolean @default(false)
  isReviewed  Boolean @default(false)

  studentId          String @db.ObjectId
  assignmentId       String @db.ObjectId
  studentOnSubjectId String @db.ObjectId
  schoolId           String @db.ObjectId
  subjectId          String @db.ObjectId

  subject          Subject          @relation(fields: [subjectId], references: [id])
  school           School           @relation(fields: [schoolId], references: [id])
  student          Student          @relation(fields: [studentId], references: [id])
  assignment       Assignment       @relation(fields: [assignmentId], references: [id])
  studentOnSubject StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])

  fileOnStudentAssignments  FileOnStudentAssignment[]
  commentOnAssignments      CommentOnAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]

  @@unique([studentOnSubjectId, assignmentId])
}

model FileOnStudentAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  type String
  url  String
  size Float

  subjectId             String              @db.ObjectId
  subject               Subject             @relation(fields: [subjectId], references: [id])
  schoolId              String              @db.ObjectId
  school                School              @relation(fields: [schoolId], references: [id])
  assignmentId          String              @db.ObjectId
  assignment            Assignment          @relation(fields: [assignmentId], references: [id])
  studentId             String              @db.ObjectId
  student               Student             @relation(fields: [studentId], references: [id])
  studentOnAssignmentId String              @db.ObjectId
  studentOnAssignment   StudentOnAssignment @relation(fields: [studentOnAssignmentId], references: [id])
}

model CommentOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  content String

  title     String
  firstName String
  lastName  String
  picture   String?
  number    String?

  status Status?     @default(PENDDING)
  role   MemberRole? @default(TEACHER)
  email  String?
  phone  String?

  subjectId             String              @db.ObjectId
  subject               Subject             @relation(fields: [subjectId], references: [id])
  schoolId              String              @db.ObjectId
  school                School              @relation(fields: [schoolId], references: [id])
  studentId             String?             @db.ObjectId
  student               Student?            @relation(fields: [studentId], references: [id])
  studentOnAssignmentId String              @db.ObjectId
  studentOnAssignment   StudentOnAssignment @relation(fields: [studentOnAssignmentId], references: [id])
  teacherOnSubjectId    String?             @db.ObjectId
  teacherOnSubject      TeacherOnSubject?   @relation(fields: [teacherOnSubjectId], references: [id])
  userId                String?             @db.ObjectId
  user                  User?               @relation(fields: [userId], references: [id])
}

model ScoreOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  score     Float
  title     String
  icon      String
  isDeleted Boolean @default(false)

  schoolId  String  @db.ObjectId
  school    School  @relation(fields: [schoolId], references: [id])
  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  scoreOnStudents ScoreOnStudent[]
}

model ScoreOnStudent {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  score Float
  title String
  icon  String

  subjectId          String           @db.ObjectId
  subject            Subject          @relation(fields: [subjectId], references: [id])
  scoreOnSubjectId   String           @db.ObjectId
  scoreOnSubject     ScoreOnSubject   @relation(fields: [scoreOnSubjectId], references: [id])
  schoolId           String           @db.ObjectId
  school             School           @relation(fields: [schoolId], references: [id])
  studentId          String           @db.ObjectId
  student            Student          @relation(fields: [studentId], references: [id])
  studentOnSubjectId String           @db.ObjectId
  studentOnSubject   StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])
}

model AttendanceTable {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?

  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  schoolId       String          @db.ObjectId
  school         School          @relation(fields: [schoolId], references: [id])
  attendances    Attendance[]
  attendanceRows AttendanceRow[]
}

model AttendanceRow {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime
  note      String?

  attendanceTableId String          @db.ObjectId
  attendanceTable   AttendanceTable @relation(fields: [attendanceTableId], references: [id])
  subjectId         String          @db.ObjectId
  subject           Subject         @relation(fields: [subjectId], references: [id])

  schoolId    String       @db.ObjectId
  school      School       @relation(fields: [schoolId], references: [id])
  attendances Attendance[]
}

model Attendance {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime

  absent  Boolean @default(false)
  present Boolean @default(false)
  holiday Boolean @default(false)
  sick    Boolean @default(false)
  late    Boolean @default(false)
  note    String?

  attendanceTableId  String           @db.ObjectId
  attendanceTable    AttendanceTable  @relation(fields: [attendanceTableId], references: [id])
  studentId          String           @db.ObjectId
  student            Student          @relation(fields: [studentId], references: [id])
  attendanceRowId    String           @db.ObjectId
  attendanceRow      AttendanceRow    @relation(fields: [attendanceRowId], references: [id])
  studentOnSubjectId String           @db.ObjectId
  studentOnSubject   StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])

  schoolId  String  @db.ObjectId
  school    School  @relation(fields: [schoolId], references: [id])
  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentOnSubjectId, attendanceRowId])
}

model Skill {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title                     String
  description               String
  keywords                  String
  vector                    Float[]
  skillOnAssignments        SkillOnAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]
  skillOnCareers            SkillOnCareer[]
}

model SkillOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  skillId      String @db.ObjectId
  assignmentId String @db.ObjectId
  subjectId    String @db.ObjectId

  subject    Subject    @relation(fields: [subjectId], references: [id])
  skill      Skill      @relation(fields: [skillId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])
}

model SkillOnStudentAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  weight Float

  subjectId             String              @db.ObjectId
  subject               Subject             @relation(fields: [subjectId], references: [id])
  skillId               String              @db.ObjectId
  skill                 Skill               @relation(fields: [skillId], references: [id])
  studentOnAssignmentId String              @db.ObjectId
  studentOnAssignment   StudentOnAssignment @relation(fields: [studentOnAssignmentId], references: [id])
}

model Career {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title          String
  describe       String
  keywords       String
  vector         Float[]
  skillOnCareers SkillOnCareer[]
}

model SkillOnCareer {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  weight Float

  skillId  String @db.ObjectId
  careerId String @db.ObjectId

  skill  Skill  @relation(fields: [skillId], references: [id])
  career Career @relation(fields: [careerId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  ADMIN
  TEACHER
}

enum Plan {
  FREE
  PREMIUM
}

enum Provider {
  LOCAL
  GOOGLE
}

enum Status {
  PENDDING
  ACCEPT
  REJECT
}
