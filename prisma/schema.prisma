generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                          String           @id @default(auto()) @map("_id") @db.ObjectId
  createAt                    DateTime
  updateAt                    DateTime         @updatedAt
  firstName                   String
  lastName                    String
  email                       String           @unique
  phone                       String
  password                    String
  role                        UserRole
  createBySchoolId            String
  lastActiveAt                DateTime
  isResetPassword             Boolean          @default(false)
  provider                    Provider
  isDeleted                   Boolean
  deleteAt                    DateTime?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  memberOnSchools             MemberOnSchool[]
}

model School {
  id                           String           @id @default(auto()) @map("_id") @db.ObjectId
  title                        String
  description                  String
  plan                         Plan
  stripe_customer_id           String?
  stripe_price_id              String?
  stripe_subscription_id       String?
  stripe_subscription_expireAt DateTime?
  memberOnSchools              MemberOnSchool[]
  classes                      Class[]
  teams                        Team[]
  students                     Student[]
}

model MemberOnSchool {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  createAt      DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  status        Status
  role          String
  firstName     String
  lastName      String
  email         String
  phone         String
  schoolId      String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  school        School         @relation(fields: [schoolId], references: [id])
  memberOnTeams MemberOnTeam[]
}

model Class {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  title         String
  level         String
  description   String
  educationYear DateTime
  schoolId      String    @db.ObjectId
  school        School    @relation(fields: [schoolId], references: [id])
  subjects      Subject[]
  students      Student[]
}

model Subject {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createAt          DateTime           @default(now())
  updateAt          DateTime           @updatedAt
  title             String
  educationYear     String
  description       String
  classId           String             @db.ObjectId
  teamId            String             @db.ObjectId
  memberOnTeamId    String             @db.ObjectId
  class             Class              @relation(fields: [classId], references: [id])
  team              Team               @relation(fields: [teamId], references: [id])
  memberOnTeam      MemberOnTeam       @relation(fields: [memberOnTeamId], references: [id])
  studentOnSubjects StudentOnSubject[]
}

model Team {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createAt      DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  title         String
  description   String
  icon          String
  schoolId      String         @db.ObjectId
  school        School         @relation(fields: [schoolId], references: [id])
  memberOnTeams MemberOnTeam[]
  subjects      Subject[]
}

model MemberOnTeam {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  memberOnSchoolId String         @db.ObjectId
  createAt         DateTime       @default(now())
  updateAt         DateTime       @updatedAt
  teamId           String         @db.ObjectId
  firstName        String
  lastName         String
  email            String
  phone            String
  userId           String
  memberOnSchool   MemberOnSchool @relation(fields: [memberOnSchoolId], references: [id])
  team             Team           @relation(fields: [teamId], references: [id])
  subjects         Subject[]
}

model Student {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createAt          DateTime           @default(now())
  updateAt          DateTime           @updatedAt
  title             String
  firstName         String
  lastName          String
  picture           String
  number            String
  schoolId          String             @db.ObjectId
  classId           String             @db.ObjectId
  school            School             @relation(fields: [schoolId], references: [id])
  class             Class              @relation(fields: [classId], references: [id])
  studentOnSubjects StudentOnSubject[]
}

model StudentOnSubject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectId String   @db.ObjectId
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  title     String
  firstName String
  lastName  String
  picture   String
  number    String
  studentId String   @db.ObjectId
  subject   Subject  @relation(fields: [subjectId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum Plan {
  FREE
  PREMIUM
}

enum Provider {
  LOCAL
  GOOGLE
}

enum Status {
  PENDDING
  ACCEPT
}
